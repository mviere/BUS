import time
import random


# %% Función Main

def main() -> None:
    """
    Requiere:
    - `import pandas as pd`
    @brief
    @param None
    @return None
    """
    
    escenario_filename = "escenario.csv"
    df_escenarios = CSV2DF(escenario_filename)
    print(df_escenarios[Tiempo])
    endProgram = False
    '''while endProgram == False:

        
                modo = escenario
                comandos = mode_management(modo)
                tiempo = time_management()
                command_processing(comandos, tiempo)
        
        endProgram = True  ''' 
    return
                

if __name__ == "__main__":
    main()

def CSV2DF (filename: str) -> pd.DataFrame:
    """
    Requiere: 
    - `import pandas as pd`

    @brief

    @param filename (str):                 Nombre del archivo 

    @return df   (pandas.DataFrame):       DataFrame de los datos
    """
    df = pd.read_csv(filename, header=[0], index_col=0)

    return df


t = 0
comando = ""

"""
# Definition Table (en base a los txt)
mode_A = []
with open("mode_A.txt") as fname:
    lineas = fname.readlines()
    for linea in lineas:
        mode_A.append(linea.strip('\n'))
        
mode_B = []
with open("mode_B.txt") as fname:
    lineas = fname.readlines()
    for linea in lineas:
        mode_B.append(linea.strip('\n'))
        
mode_C = []
with open("mode_C.txt") as fname:
    lineas = fname.readlines()
    for linea in lineas:
        mode_C.append(linea.strip('\n'))
    return
"""

'''
'Funcion contador'
def():
    ....
return contando, T, t, 

'Funcion ejecucion de escenario'
while ('parametro booleano de la funcion contador de tiempo'):
    t += 1 'potestad de funcion contador'
    if t % 1 == 0:
        comando = random.choice(["comando1", "comando2", "comando3"])
    print("t:", t, "comando:", comando)
    time.sleep(1)
'''
'''
def main():
    es una función anidada en la que realiza las siguientes acciones:
        lee línea de archivo escenario
        interactua con función gestión de modos(ModoX)
        interactua con función gestión del tiempo()
        ejecuta escenario une comando con tiempo
    return

def gestión de modos(ModoX):
    Lista_de_Cmd = []
    evalúa si debe ocurrir una transición, compara el ModoX con Modo anterior escenario[n-1]
    si hay transición:
        Lista_de_Cmd_Trans = función transición de modos()
        comandos.append(Lista_de_Cmd_Trans)
    Lista_de_Cmd = función procesamiento de modos(Modox)
    comandos.append(Lista_de_Cmd)
    return Lista_de_Cmd

def transición de modos():
    lee los comandos de la def table de trans.
    return Lista_de_Cmd_Trans

def procesamiento de modos(ModoX):
    lee los comandos de las def table de modos.
    return Lista_de_Cmd

def gestión del tiempo():
    contador
    return contando, T, t
'''

''''''''''''